{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww28420\viewh15760\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs28 \cf0 Restore mongodb and data from snapshot.\
\
Restore mongodb:\
\
	1 - Install mongodb on a ec2 instance.\
	2 - Place configuration file as /etc/mongod.conf.\
	3 - deploy volume from snapshot. (right click on the snapshot and click deploy, select region if different)\
	4 - Attach that volume to ec2 instance at \CocoaLigature0 /var/lib/mongodb directory.(mount /dev/mapper/vg01-vol01 /var/lib/mongodb)\CocoaLigature1 \
	4 - Remove the mongo.lock file from /var/lib/mongodb and restart mongodb.\
\
/etc/mongod.conf\
__________________________________\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \CocoaLigature0 ---\
systemLog:\
  path: "/var/log/mongodb/mongod.log"\
  logAppend: true\
  destination: file\
net:\
  port: 27017\
security:\
  authorization: disabled\
storage:\
  dbPath: "/var/lib/mongodb"\
  journal:\
    enabled: true\
  engine: mmapv1\
replication:\
  replSetName: rs0\CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 __________________________________ \
\
Manage_backups.py is a tool built in python to facilitate EBS volume snapshots. it should only be used with volumes on replica sets or hidden nodes.\
Manage_backups.py script takes one argument, number of ( days or hours ) old snapshots to delete.\
\
Such as:\
# python manage_backups.py \'97days 3\
\
Above command will delete all the snapshots older than three(3) days for volumes listed in the script, and it will also create a new snapshot for the managed volume(s).\
There is a list of vol-ids in the script to make snapshots of. To create snapshot of volumes please add the vol-id to that list.\
\
Note: if run the script without any arg, it will only create a new snapshot for the volumes listed in the script.\
Please change these variables accordingly.\
\
ssh_user = \'93ubuntu\'94\
ssh_key = \'93ssh keys\'94\
db_host = \'93replica or hidden node ip\'94\
\
This script will check if the database if running, if not, then it will take a snapshot and then start the database.\
If the database is running it will stop it, take the snapshot and restart it.\
\
manage_backups.py\
_________________________________\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \CocoaLigature0 #!/usr/bin/python\
\
import boto3\
import argparse\
import datetime \
from time import sleep\
from subprocess import Popen, PIPE, call\
\
parser = argparse.ArgumentParser(description='Usage: remove snapshots older than n number')\
parser.add_argument('-d', '--days', action='store', type=float, help='number of days')\
parser.add_argument('-H', '--hours', action='store', type=float, help='number of hours')\
results = parser.parse_args()\
\
ssh_user = "ubuntu"\
db_host = '172.31.14.195'\
ssh_key = "/home/ubuntu/.ssh/es-test.pem"\
start_mongodb = "sudo service mongod start"\
status_mongodb = "sudo service mongod status"\
stop_mongodb = "sudo service mongod stop"\
\
snapshot_age = 10000000\
today = datetime.datetime.now().strftime('%s')\
\
# Add volume ids in the list blew to take snapshots of.\
volumes = ['vol-1f8007e7', 'vol-b278154a']\
\
#checking database status.\
command = 'ssh -o StrictHostKeyChecking=no -i %s %s@%s %s' % (ssh_key,\
                                                              ssh_user,\
                                                              db_host,\
                                                              status_mongodb)\
\
try:\
    status = call(command, shell=True)\
    if status != 0:\
        print "mongodb is already stopped!"\
    else:\
        print 'stopping mongodb...'\
        proc = Popen('ssh -o StrictHostKeyChecking=no -i %s %s@%s %s' % (ssh_key,\
                                                                         ssh_user,\
                                                                         db_host,\
                                                                         stop_mongodb), stdout=PIPE, shell=True).communicate()[0]\
        proc\
except:\
    err = sys.exc_info()\
    print "ERR MSG: " + str(err[1])\
\
\
if results.hours:\
    snapshot_age = (float(results.hours) * 60 * 60)\
\
if results.days:\
    snapshot_age = float(results.days) * (24 * 60 * 60)\
\
#create snapshots\
def create_snap(volume_id):\
    ec2_client = boto3.client('ec2')\
    ec2_client.create_snapshot(DryRun=False,\
                               VolumeId=volume_id,\
                               Description="backup-snapshot")\
#remove snapshots\
def remove_snap(snapshot_id):\
    ec2 = boto3.resource('ec2')\
    snap = ec2.Snapshot(snapshot_id)\
    snap.delete()\
\
# find snapshots older than n number of days.\
def get_snapshots(volume_id):\
    count = 0\
    snap_list = []\
    ec2_client = boto3.client('ec2')\
    snapshots = ec2_client.describe_snapshots()\
    print '...'\
    for snap in snapshots['Snapshots']:\
        if snap['VolumeId'] == volume_id:\
            count += 1\
            print "VolumeId: %s, Volume Size: %s, SnapshotId: %s" % (snap['VolumeId'], snap['VolumeSize'], snap['SnapshotId'])\
            if (int(today) - int(snap['StartTime'].strftime('%s'))) >= snapshot_age:\
                snap_list.append(snap["SnapshotId"])\
\
    print "VolumeId: %s, Total SnapShots: %s" % (volume_id, count)\
    sleep(1)\
    print "Deleted: %s" % len(snap_list)\
    return snap_list\
\
# create snapshots\
for volume in volumes:\
    volume_id = volume\
    create_snap(volume_id)\
    snapshot_id = get_snapshots(volume_id)\
    for ids in snapshot_id:\
        remove_snap(ids)\
\
#start mongodb\
sleep(60)\
proc = Popen('ssh -o StrictHostKeyChecking=no -i %s %s@%s %s' % (ssh_key,\
                                                                 ssh_user,\
                                                                 db_host,\
                                                                 start_mongodb), shell=True).communicate()[0]\
proc}